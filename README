FMA HW4

All code for Homework 4 is contained within the FMA Folder. The FMA folder
has its own Makefile, and it totally separate from the code I've written
so far. This was because I did HW1-3 in c++, without using nrutils. For
HW4, since the starting code had nrutils really engrained into it, I
decided to just modify the existing C code we were given rather than
try to rewrite the whole thing into C++ using vectors etc. Anyway,
the result is my HW4 code is all in the FMA folder.

** COMPILATION AND RUNNING *

Compilation for FMA is all done with the FMA makefile.

Run command is:  ./main

**SETUP**

Settings can be tweaked by adjusting the macro variables in mg.h. Other
settings, like number of timesteps and problem size, are adjusted in
main.c by changing the labeled variables.

Choice of solver (RB G-S, G-S, or Jacobi) is done in main.c, as explained
in the file itself.

**OUTPUT**

Output for my program is done into the soln.dat similar to how the
original 2-d code we were given is done. I adjusted the matlab script to
pull a slice from the middle of the 3-d matrix and display that. Simply
run the easier_to_read.m matlab program to display the program output.

///////////////////////// HW 2 + 3 //////////////////////////////////

SETUP

Basic variables and settings can be altered in the main.cpp
file. Explanations for all the variables are included in main.cpp,
so changing things should be fairly straight forward.

I recommend a problem size of 100x100x100 for FTCS, and a problem size
of 10x10x10 for CN. 50x50x50 works nicely for Jacobi, GS, and SOR.

	**Boundary Conditions**

The boundary condition functions can be defined in the boundary.cpp
file. The dirichilet and periodic conditions can be set here. The
dirichilet function takes the x,y,z coordinates as input, and returns
the temperature. (i.e., it supports spatial dependency). The periodic
function takes x,y,z coordinates as input, along with the iteration
that the solver is at as well as dt, and returns the temperature. (i.e.,
it supports both spatial and temporal dependencies).

By default, the dirichilet BC is 0 everywhere. The periodic condition
defaults to 1000*dt*n.

Once defined, choice of BC type is done in main.cpp. See main.cpp
for details.

	**Source Terms**

The source term function can be defined in the sourceterm.cpp file. The
source term function takes the x,y,z coordinates as input, and returns
the temperature. (i.e., it supports spatial dependency).

By default, the source term is set to 0.01. This is enough (using the
other default settings) to keep the system at steady state (in the very
long term), but not so high as to cause the system to blow up.

COMPILATION

Compilation is done using the included Makefile.

RUNTIME

To run the code using the FTCS solver, use:

./solver

To run using the CN solver, use:

./solver -CN

To run using the Jacobi solver, use:

./solver -Jacobi

To run using the Gauss-Seidel (GS) solver, use:

./solver -GS 

To run using the Successive Over-Relaxation (SOR) solver, use:

./solver -SOR
